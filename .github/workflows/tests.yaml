name: R2Inference CI

on:
  push:
    branches:
      - master
      - dev-*
      - feature/extend-ci-ubuntu-16.04
  pull_request:
    branches:
      - dev-*

jobs:
  build_tensorflow_autotools:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
       os: [ubuntu-18.04]
       container: ["ridgerun/r2inference:v0.1.4", "ridgerun/r2inference-ubuntu-16.04:v0.1.0"]
    container:
      image: ${{ matrix.container }}
    env:
      CXXFLAGS: "-Werror"
    steps:
    - uses: actions/checkout@v2
    - name: Install backend version
      run: |
        tar -C /usr/local -xzf /root/r2inference/backends/tensorflow/v1.15.0/libtensorflow-cpu-linux-x86_64-1.15.0.tar.gz
        ldconfig
    - name: Configure the project
      run: |
        CXXFLAGS="${{ env.CXXFLAGS }}"
        NOCONFIGURE=1 ./autogen.sh
        ./configure --disable-docs --enable-tensorflow
    - name: Build library
      run: make
    - name: Run tests
      run: make check
    - name: Install library
      run: |
        make install
    - name: Build example
      env:
        LD_LIBRARY_PATH: /usr/local/lib/
      run: |
        cd examples/external
        make
        ./list-backends
  build_tflite_autotools:
    runs-on: ubuntu-18.04
    container: ridgerun/r2inference:v0.1.4
    env:
      TENSORFLOW_PATH: /root/r2inference/backends/tflite/v2.0.1/include/tensorflow
      CPPFLAGS: "-I${TENSORFLOW_PATH} -I${TENSORFLOW_PATH}/tensorflow/lite/tools/make/downloads/flatbuffers/include"
      CXXFLAGS: "-Werror"
    steps:
    - uses: actions/checkout@v2
    - name: Install backend version
      run: |
        cp /root/r2inference/backends/tflite/v2.0.1/binaries/libtensorflow-lite.a /usr/local/lib/
    - name: Configure the project
      run: |
        CPPFLAGS="${{ env.CPPFLAGS }}"
        CXXFLAGS="${{ env.CXXFLAGS }}"
        ./autogen.sh --disable-docs --enable-tflite
    - name: Build library
      run: make
    - name: Run tests
      run:  make check
    - name: Install library
      run: |
        make install
    - name: Build example
      env:
        LD_LIBRARY_PATH: /usr/local/lib/
      run: |
        cd examples/external
        make
        ./list-backends
  build_tensorflow_tflite_autotools:
    runs-on: ubuntu-18.04
    container: ridgerun/r2inference:v0.1.4
    env:
      TENSORFLOW_PATH: /root/r2inference/backends/tflite/v2.0.1/include/tensorflow
      CPPFLAGS: "-I${TENSORFLOW_PATH} -I${TENSORFLOW_PATH}/tensorflow/lite/tools/make/downloads/flatbuffers/include"
      CXXFLAGS: "-Werror"
    steps:
    - uses: actions/checkout@v2
    - name: Install backend version
      run: |
        tar -C /usr/local -xzf /root/r2inference/backends/tensorflow/v1.15.0/libtensorflow-cpu-linux-x86_64-1.15.0.tar.gz
        ldconfig
        cp /root/r2inference/backends/tflite/v2.0.1/binaries/libtensorflow-lite.a /usr/local/lib/
    - name: Configure the project
      run: |
        CPPFLAGS="${{ env.CPPFLAGS }}"
        CXXFLAGS="${{ env.CXXFLAGS }}"
        ./autogen.sh --disable-docs --enable-tensorflow --enable-tflite
    - name: Build library
      run: make
    - name: Run tests
      run:  make check
    - name: Install library
      run: |
        make install
    - name: Build example
      env:
        LD_LIBRARY_PATH: /usr/local/lib/
      run: |
        cd examples/external
        make
        ./list-backends
  build_tensorflow_meson:
    runs-on: ubuntu-18.04
    container: ridgerun/r2inference:v0.1.4
    env:
      CXXFLAGS: "-Werror"
    steps:
    - uses: actions/checkout@v2
    - name: Install backend version
      run: |
        tar -C /usr/local -xzf /root/r2inference/backends/tensorflow/v1.15.0/libtensorflow-cpu-linux-x86_64-1.15.0.tar.gz
        ldconfig
    - name: Configure the project
      run: |
        CXXFLAGS="${{ env.CXXFLAGS }}"
        meson build -Denable-tensorflow=true -Denable-docs=disabled
    - name: Build library
      run: ninja -C build
    - name: Run tests
      run: ninja -C build test
    - name: Install library
      run: |
        ninja -C build install
    - name: Build example
      run: |
        cd build/examples/external
        ./list_backends
  build_tflite_meson:
    runs-on: ubuntu-18.04
    container: ridgerun/r2inference:v0.1.4
    env:
      TENSORFLOW_PATH: /root/r2inference/backends/tflite/v2.0.1/include/tensorflow
      CPPFLAGS: "-I${TENSORFLOW_PATH} -I${TENSORFLOW_PATH}/tensorflow/lite/tools/make/downloads/flatbuffers/include"
      CXXFLAGS: "-Werror"
    steps:
    - uses: actions/checkout@v2
    - name: Install backend version
      run: |
        cp /root/r2inference/backends/tflite/v2.0.1/binaries/libtensorflow-lite.a /usr/local/lib/
    - name: Configure the project
      run: |
        CPPFLAGS="${{ env.CPPFLAGS }}"
        CXXFLAGS="${{ env.CXXFLAGS }}"
        meson build -Denable-tflite=true -Denable-docs=disabled
    - name: Build library
      run: ninja -C build
    - name: Run tests
      run: ninja -C build test
    - name: Install library
      run: |
        ninja -C build install
    - name: Build example
      run: |
        cd build/examples/external
        ./list_backends
  build_tensorflow_tflite_meson:
    runs-on: ubuntu-18.04
    container: ridgerun/r2inference:v0.1.4
    env:
      TENSORFLOW_PATH: /root/r2inference/backends/tflite/v2.0.1/include/tensorflow
      CPPFLAGS: "-I${TENSORFLOW_PATH} -I${TENSORFLOW_PATH}/tensorflow/lite/tools/make/downloads/flatbuffers/include"
      CXXFLAGS: "-Werror"
    steps:
    - uses: actions/checkout@v2
    - name: Install backend version
      run: |
        tar -C /usr/local -xzf /root/r2inference/backends/tensorflow/v1.15.0/libtensorflow-cpu-linux-x86_64-1.15.0.tar.gz
        ldconfig
        cp /root/r2inference/backends/tflite/v2.0.1/binaries/libtensorflow-lite.a /usr/local/lib/
    - name: Configure the project
      run: |
        CPPFLAGS="${{ env.CPPFLAGS }}"
        CXXFLAGS="${{ env.CXXFLAGS }}"
        meson build -Denable-tensorflow=true -Denable-tflite=true -Denable-docs=disabled
    - name: Build library
      run: ninja -C build
    - name: Run tests
      run: ninja -C build test
    - name: Install library
      run: |
        ninja -C build install
    - name: Build example
      run: |
        cd build/examples/external
        ./list_backends
